#!/bin/bash

debug_out "Processing dot misc"

debug_out() {
    if [[ $- == *i* && $DOT_DEBUG ]]
    then
        echo $@
    fi
}

debug_out "Processing configuration for Miscellaneous Tools"

list_functions() {
    echo "listing functions"
    for return_status in 0
    do
        if [[ $1 == "--help" || $1 == "-h" ]]
        then
            return_status=1
            message="Print all the functions defined in a dot file"
            message="$message\nUSAGE: ${FUNCNAME[0]} <dot_file>"
            break
        fi

        dotfile=$1
        if [[ -z $dotfile ]]
        then
            return_status=1
            message="No dotfile supplied to find functions in"
            break
        fi

        echo "Functions defined in $dotfile"
        defined_functions=$(typeset -F | perl -pe "s/declare -f //")

        for function in $defined_functions
        do
            line_info=$(grep -n "^$function\(\)\s*{" $dotfile)
            if (( $? ))
            then
                continue
            fi

            line_num=$(echo $line_info | perl -pe "s/(\d+):.*/\1/")
            echo "    $function  [$line_num]"
        done

        message=""
    done

    echo $message
    return $return_status
}

# Heavily adapted from: https://gist.github.com/MarkRose/1772891
bind_ssh_agent() {
    debug_out "Binding to ssh agent"

    for FILE in $(find /tmp/ssh-* -type s -user ${LOGNAME} -name "agent.[0-9]*" 2> /dev/null)
    do
        SOCK_PID=${FILE##*.}
        PID=$(echo $SOCK_PID | cut -d '.' -f2 | awk '{print $1 + 1}' | xargs ps -o pid= -p | xargs)
        if [[ -z "$PID" ]]
        then
            continue
        fi

        SSH_AUTH_SOCK=${FILE}
        SSH_AGENT_PID=${PID}

        ssh-add -l > /dev/null
        if [ $? != 2 ]
        then
            debug_out "Found agent pid: ${PID}. Binding to it"
            export SSH_AUTH_SOCK
            export SSH_AGENT_PID
            return
        fi
        debug_out "Skipping pid ${PID}"
    done

    debug_out "Didn't find an existing ssh-agent to bind. Initializing a new agent"
    eval $(ssh-agent) 2>&1 > /dev/null
}
