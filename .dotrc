#!/usr/bin/env bash

debug_out() {
    if [[ $- == *i* && $DOT_DEBUG ]]
    then
        echo $@
    fi
}

debug_out "Processing main dot configuration"

export EDITOR='vim'
export VISUAL='vim'
export PAGER='less -R'
export LESS='SX'
export HISTSIZE=1000000
export HISTFILESIZE=1000000
export HISTCONTROL=ignorespace:ignoredups
shopt -s histappend
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

export GIT_PS1_SHOWDIRTYSTATE=1
export DIFF_COLOR_DO_HORIZONTAL=1
export DIFF_COLOR_MERGE_ONE_LINERS=1

export PATH=$PATH:~/bin:/Applications/Postgres.app/Contents/Versions/latest/bin

debug_out "Detecting which python3"
# For the rtk machines...they make executables for python3.4 this way
python3_path=$(which python34 || which python3)
debug_out "found python path at $python3_path"
if [[ -n $python3_path ]]
then
    debug_out "Detected python3 at $python3_path"
    user_base=$($python3_path -c 'import site;print(site.USER_BASE)')
    if (( $? ))
    then
        debug_out "Python3 is not yet installed. Not modifying PATH"
    else
        export PATH="$PATH:$user_base/bin"
        alias python3=$python3_path
        debug_out "Added python3 user base to PATH"
    fi
fi

alias vim='vim -O'
alias vi='vim'
alias evim='$EDITOR ~/dot/.vimrc'

alias egit='$EDITOR ~/dot/.gitconfig'

alias ebash="$EDITOR ~/.bashrc"
alias sbash='source ~/.bashrc'

alias edot="$EDITOR ~/dot/.dotrc"
alias sdot='source ~/dot/.dotrc'
alias idot='install_dot'
alias cdot='cd ~/dot'

alias egrep='egrep --color=auto'
alias grep='egrep --color=auto'

alias sl='ls'
if [[ $(uname) == "Darwin" ]]
then
    alias ls='gls --color=tty'
    alias ln='gln'
    alias cp='gcp'
    alias touch='gtouch'
    alias vim='/usr/local/bin/vim -O'
    alias ps='pstree -wg3 | less'
else
    alias ls='ls --color=tty'
fi

alias cd='fancy_cd'
alias less='less -RNJMw -z-4'

alias mkdir="echo '(remember the td function?)'; command mkdir"

alias activate='source $(ls | grep env)/bin/activate'

alias gti='git'

debug_out "Detecting which ack"
which ack > /dev/null 2>&1
if (( $? ))
then
    alias ack='ack-grep --color'
else
    alias ack='ack --color'
fi

rentrak_rsa_key="tbeck_rentrak_id_rsa"
rentrak_rsa_path="$HOME/.ssh/$rentrak_rsa_key"
if [[ -e $rentrak_rsa_path ]]
then
    if [[ -z "$(ssh-add -l | grep $rentrak_rsa_key)" ]]
    then
        debug_out "$rentrak_rsa_key key not found in active ssh identities not found.  Setting it up:"
        ssh-add $rentrak_rsa_path
    fi
fi

dusktreader_rsa_key="dusktreader_id_rsa"
dusktreader_rsa_path="$HOME/.ssh/$dusktreader_rsa_key"
if [[ -e $dusktreader_rsa_path ]]
then
    if [[ -z "$(ssh-add -l | grep $dusktreader_rsa_key)" ]]
    then
        debug_out "$dusktreader_rsa_key key not found in active ssh identities not found.  Setting it up:"
        ssh-add $dusktreader_rsa_path
    fi
fi

pip_install_save() {
    package_name=$1
    requirements_file=$2
    if [[ -z $requirements_file ]]
    then
        requirements_file='./etc/setuptools/requirements.txt'
    fi
    pip install $package_name && pip freeze | grep -i "^$package_name==" >> $requirements_file
}

count_files_in_subdirs() {
    target_dir=$1
    if [[ -z $target_dir ]]
    then
        echo "Please supply a target directory" >&2
        return 1
    fi
    debug_out "Counting files in subdirectories of $(readlink -f $target_dir)"
    sort_arg=$2
    if [[ -z $sort_arg ]]
    then
        sort_arg="-k2rn"
    fi
    timestamp=$(date '+%Y%m%d_%H%M%S')
    filename="/tmp/$timestamp-counts.txt"
    rm -f $filename
    for subdir in $(find $target_dir -maxdepth 1 -type d ! -path . )
    do
        echo "$subdir: $(find $subdir -type f | wc -l)" >> $filename
    done
    cat $filename | sort $sort_arg
}

smart_ls() {
    target=$1
    simple_list=$(command ls -1 $target) || return
    count=$(echo $simple_list | wc -w)
    if (( $count == 0 ))
    then
        echo "Directory is empty"
    elif (( $count <= 10 ))
    then
        ls -l --color=tty $target
    elif (( $count <= 100 ))
    then
        ls --color=tty $target
    else
        echo "Directory contains $count files"
    fi
}

fancy_cd() {
    newdir=$1
    builtin cd $newdir || return
    smart_ls .
}

td() {
    newdir=$1
    command mkdir $newdir || return
    builtin cd $newdir
}

abs_path() {
    path=$1
    if [[ -z $path ]]
    then
        pwd
        return
    fi

    python -c "import os; print(os.path.realpath('$path'))"
}

install_local_python() {
    log_file=$1
    redirect=''
    if [[ ! -z $log_file ]]
    then
        redirect=">>$log_file 2>&1"
    fi

    command cd ~
    commands=(
        "wget http://www.python.org/ftp/python/3.4/Python-3.4.tgz"
        "tar xzf Python-3.4.tgz"
        "command cd Python-3.4/"
        "./configure --prefix=/home/tbeck/"
        "make"
        "make install"
        "rm -rf Python-3.4*"
    )
    for command in "${commands[@]}"
    do
        eval "$command $redirect"
        if (( $? ))
        then
            message="Command failed: $command"
            return 0
        fi
    done
    return 1
}

debug_out "Detecting git"
which git > /dev/null 2>&1
if (( $? ))
then
    debug_out "Did not detect git. Using default prompt"
    export PS1="$C3// $C6[\h:\w]$C4 $P\n\$ "
else
    debug_out "Detected git. Embedding git branch propmt"
    source ~/dot/.git-prompt
    export PS1="$C3// $C6[\h:\w]$C4 \$(__git_ps1 '(%s)')$P\n\$ "
fi

# TODO: do this right
debug_out "Detecting virtualenvwrapper"
which virtualenvwrapper.sh > /dev/null 2>&1
if (( $? ))
then
    debug_out "Did not detect virtualenvwrapper. Skipping"
else
    debug_out "Found virtualenvwrapper. Sourcing with python3"
    export VIRTUALENVWRAPPER_PYTHON=$(which python3)
    source $(which virtualenvwrapper.sh)
fi
