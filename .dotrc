#!/usr/bin/env bash

debug_out() {
    if [[ $- == *i* && $DOT_DEBUG ]]
    then
        echo $@
    fi
}

debug_out "Processing main dot configuration"

export PAGER='less -R'
export LESS='SX'
export HISTSIZE=1000000
export HISTFILESIZE=1000000
export HISTCONTROL=ignorespace:ignoredups
shopt -s histappend
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

export GIT_PS1_SHOWDIRTYSTATE=1
export DIFF_COLOR_DO_HORIZONTAL=1
export DIFF_COLOR_MERGE_ONE_LINERS=1

export PATH=$PATH:~/bin:/Applications/Postgres.app/Contents/Versions/latest/bin

# Initialize pyenv
debug_out "Initializing pyenv"
export PATH="~/.pyenv/bin/:$PATH"
pyenv commands > /dev/null 2>&1
if (( $? ))
then
    debug_out "Did not detect pyenv. Skipping"
else
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# Add yarn binaries to the path
export PATH="~/.yarn/bin/:$PATH"

# Add go binaries to the path
export PATH="/usr/local/go/bin:$PATH"

# alias vim='/Applications/MacVim.app/Contents/MacOS/Vim -O'
if [[ $(uname) == "Darwin" ]]
then
    raw_vim_command='/usr/local/bin/vim -O'
else
    raw_vim_command='vim -O'
fi

custom_vim () {
    ls Pipfile > /dev/null 2>&1
    if (( $? ))
    then
        $raw_vim_command $@
    else
        pipenv run $raw_vim_command $@
    fi
}

alias vim=custom_vim
alias vi=cutom_vim
alias evim='$EDITOR ~/dot/.vimrc'
export EDITOR=$raw_vim_command
export VISUAL=$raw_vim_command

alias egit='$EDITOR ~/dot/.gitconfig'

alias ebash="$EDITOR ~/.bashrc"
alias sbash='source ~/.bashrc'

alias edot="$EDITOR ~/dot/.dotrc"
alias sdot='source ~/dot/.dotrc'
alias idot='install_dot'
alias cdot='cd ~/dot'

alias egrep='egrep --color=auto'
alias grep='egrep --color=auto'

alias cojira='checkout-branch-by-pattern'
alias cb='current-branch'

alias sl='ls'
if [[ $(uname) == "Darwin" ]]
then
    alias ls='gls --color=tty'
    alias ln='gln'
    alias cp='gcp'
    alias touch='gtouch'
    alias ps='pstree -wg3 | less'
else
    alias ls='ls --color=tty'
fi

alias cd='fancy_cd'
alias less='less -RNJMw -z-4'

alias activate='source $(ls | grep env)/bin/activate'

alias gti='git'

alias nofail='py.test test* --maxfail=1 -m "not slow"'
alias nofailall='py.test test --maxfail=1'

export PATH="$HOME/.nodenv/bin:$PATH"
debug_out "Initializing nodenv"
which nodenv > /dev/null 2>&1
if (( $? ))
then
    debug_out "Did not detect nodenv. Skipping"
else
    eval "$(nodenv init -)"
    debug_out "Finished initializing nodenv"
fi

debug_out "Detecting which ack"
which ack > /dev/null 2>&1
if (( $? ))
then
    alias ack='ack-grep --color'
else
    alias ack='ack --color'
fi


# Start agent if it is not already started
if [[ -n "$VIRTUAL_ENV" ]]
then
    debug_out "Agent already initialized. Skipping..."
else
    debug_out "Initialising new SSH agent..."
    eval "$(ssh-agent)"
fi

rentrak_rsa_key="tbeck_rentrak_id_rsa"
rentrak_rsa_path="$HOME/.ssh/$rentrak_rsa_key"
if [[ -e $rentrak_rsa_path ]]
then
    if [[ -z "$(ssh-add -l | grep $rentrak_rsa_key)" ]]
    then
        debug_out "$rentrak_rsa_key key not found in active ssh identities not found.  Setting it up:"
        ssh-add $rentrak_rsa_path
    fi
fi

dusktreader_rsa_key="dusktreader_id_rsa"
dusktreader_rsa_path="$HOME/.ssh/$dusktreader_rsa_key"
if [[ -e $dusktreader_rsa_path ]]
then
    if [[ -z "$(ssh-add -l | grep $dusktreader_rsa_key)" ]]
    then
        debug_out "$dusktreader_rsa_key key not found in active ssh identities not found.  Setting it up:"
        ssh-add $dusktreader_rsa_path
    fi
fi

nuke () {
    branch_name=$1
    local_name=$(echo $1 | sed s#origin/##)
    remote_name=origin/$local_name
    echo "Nuking $1 locally and on origin"
    echo "Latest commits:"
    echo "==============="
    echo "local"
    echo "-----"
    git --no-pager log -n 1 --pretty=format:"%h - %an (%ar): %s" $local_name
    echo
    echo "remote"
    echo "-----"
    git --no-pager log -n 1 --pretty=format:"%h - %an (%ar): %s" $remote_name
    echo
    echo "....."
    read -p "Press ENTER to continue"
    git branch -D $1
    git push origin --delete $1
}

ematch () {
    pattern=$1
    path=$2
    command vim $(ack -l $pattern $path)
}

pyclean () {
    find . -type f -name "*.py[co]" -delete
    find . -type d -name "__pycache__" -delete
}

install_dot() {
    rm -rf .wheels/dot*
    pip3 wheel -w .wheels .
    pip3 install -U .wheels/dot*
}

pip_install_save() {
    package_name=$1
    requirements_file=$2
    if [[ -z $requirements_file ]]
    then
        requirements_file='./etc/setuptools/requirements.txt'
    fi
    pip install $package_name && pip freeze | grep -i "^$package_name==" >> $requirements_file
}

count_files_in_subdirs() {
    target_dir=$1
    if [[ -z $target_dir ]]
    then
        echo "Please supply a target directory" >&2
        return 1
    fi
    debug_out "Counting files in subdirectories of $(readlink -f $target_dir)"
    sort_arg=$2
    if [[ -z $sort_arg ]]
    then
        sort_arg="-k2rn"
    fi
    timestamp=$(date '+%Y%m%d_%H%M%S')
    filename="/tmp/$timestamp-counts.txt"
    rm -f $filename
    for subdir in $(find $target_dir -maxdepth 1 -type d ! -path . )
    do
        echo "$subdir: $(find $subdir -type f | wc -l)" >> $filename
    done
    cat $filename | sort $sort_arg
}

smart_ls() {
    target=$1
    simple_list=$(command ls -1 $target) || return
    count=$(echo $simple_list | wc -w)
    if (( $count == 0 ))
    then
        echo "Directory is empty"
    elif (( $count <= 10 ))
    then
        ls -l --color=tty $target
    elif (( $count <= 100 ))
    then
        ls --color=tty $target
    else
        echo "Directory contains $count files"
    fi
}

fancy_cd() {
    newdir=$1
    builtin cd $newdir || return
    smart_ls .
}

abs_path() {
    path=$1
    if [[ -z $path ]]
    then
        pwd
        return
    fi

    python -c "import os; print(os.path.realpath('$path'))"
}

install_local_python() {
    log_file=$1
    redirect=''
    if [[ ! -z $log_file ]]
    then
        redirect=">>$log_file 2>&1"
    fi

    command cd ~
    commands=(
        "wget http://www.python.org/ftp/python/3.4/Python-3.4.tgz"
        "tar xzf Python-3.4.tgz"
        "command cd Python-3.4/"
        "./configure --prefix=/home/tbeck/"
        "make"
        "make install"
        "rm -rf Python-3.4*"
    )
    for command in "${commands[@]}"
    do
        eval "$command $redirect"
        if (( $? ))
        then
            message="Command failed: $command"
            return 0
        fi
    done
    return 1
}

debug_out "Overriding virtualenv PS1 settings"
export VIRTUAL_ENV_DISABLE_PROMPT=1

function venv_info {
    if [[ -n "$VIRTUAL_ENV" ]]
    then
        echo "/venv:${VIRTUAL_ENV##*/}/ "
    else
        echo ""
    fi
}
export VENV_INFO="\$(venv_info)"

ps1_prefix="$C3// $C6[\h:\w]$C11[\D{%F %T}]$C4"
ps1_suffix="\n$C8${VENV_INFO}$P\$ "

debug_out "Detecting git"
which git > /dev/null 2>&1

if (( $? ))
then
    debug_out "Did not detect git. Using default prompt"
    export PS1="$ps1_prefix $ps1_suffix"
else
    debug_out "Detected git. Embedding git branch propmt"
    source ~/dot/.git-prompt
    export PS1="$ps1_prefix \$(__git_ps1 '(%s)') $ps1_suffix"
fi
