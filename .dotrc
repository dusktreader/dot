#!/usr/bin/env bash

debug_out "Processing main dot configuration"

export PAGER='less -R'
export LESS='SX'
export HISTSIZE=1000000
export HISTFILESIZE=1000000
export HISTCONTROL=ignorespace:ignoredups
shopt -s histappend
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

export GIT_PS1_SHOWDIRTYSTATE=1
export DIFF_COLOR_DO_HORIZONTAL=1
export DIFF_COLOR_MERGE_ONE_LINERS=1

export PATH=$PATH:~/bin:/Applications/Postgres.app/Contents/Versions/latest/bin
export PATH=$PATH:~/.local/bin

# Add yarn binaries to the path
export PATH="~/.yarn/bin/:$PATH"

# Add go binaries to the path
export PATH="/usr/local/go/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"

# Add generic binaries to the path
export PATH="~/bin:$PATH"

alias vim='nvim -O'
raw_vim_command='nvim'

alias vi='nvim'
alias evim='$EDITOR ~/.config/nvim/init.lua'
alias eplug='$EDITOR ~/.config/nvim/plugins.vim'
export EDITOR=$raw_vim_command
export VISUAL=$raw_vim_command

alias eack='$EDITOR $DOT_HOME/.ackrc'

alias egit='$EDITOR $DOT_HOME/.gitconfig'

alias ebash="$EDITOR ~/.bashrc"
alias sbash='source ~/.bashrc'

# TODO: this should have a configurable dot location based on dot-configure root
alias edot="$EDITOR $DOT_HOME/.dotrc"
alias sdot='source $DOT_HOME/.dotrc'
alias idot='install_dot'
alias cdot='cd $DOT_HOME'

alias cdwork='cd $HOME/git-repos/omnivector'
alias cdmine='cd $HOME/git-repos/personal'

alias ecoc="$EDITOR $DOT_HOME/.config/nvim/coc-settings.json"

alias einstall="$EDITOR $DOT_HOME/install.sh"

alias elualine="$EDITOR $DOT_HOME/.config/nvim/lualine.lua"

alias eposh="$EDITOR $DOT_HOME/.config/oh-my-posh/dusktreader.omp.yaml"

alias egrep='egrep --color=auto'
alias grep='egrep --color=auto'

alias cojira='checkout-branch-by-pattern'
alias cb='current-branch'

alias sl='ls'
if [[ $(uname) == "Darwin" ]]
then
    alias ls='gls --color=tty'
    alias ln='gln'
    alias cp='gcp'
    alias touch='gtouch'
    alias ps='pstree -wg3 | less'
else
    alias ls='ls --color=tty'
fi

alias cd='fancy_cd'
alias less='less -RNJMw -z-4'

alias activate='source $(ls | grep env)/bin/activate'

alias gti='git'

alias nofail='py.test test* --maxfail=1 -m "not slow"'
alias nofailall='py.test test --maxfail=1'

alias tfm='terraform'

alias k='kubectl'

alias wjst='watch -n 1 -c juju status --color'

function wisdom {
    curl -s -X GET -H "Content-Type: application/json" https://zenquotes.io/api/random | jq -r '" " as $space | .[0] | .q + "\n\n\($space * ((.q |length)-(.a |length) - 2))--" + .a' | cowsay -nsf $(cowsay -l | tail -n +2  | tr ' ' '\n' | shuf -n1) | lolcat
}

export PATH="$HOME/.nodenv/bin:$PATH"
debug_out "Initializing nodenv"
which nodenv > /dev/null 2>&1
if (( $? ))
then
    debug_out "Did not detect nodenv. Skipping"
else
    eval "$(nodenv init -)"
    debug_out "Finished initializing nodenv"
fi

debug_out "Detecting which ack"
which ack > /dev/null 2>&1
if (( $? ))
then
    alias ack='ack-grep'
fi


# Start agent if it is not already started
if [[ -n "$SSH_AGENT_PID" ]]
then
    debug_out "Agent already initialized. Skipping..."
else
    debug_out "Initialising new SSH agent..."
    eval "$(ssh-agent)"
fi

poetry_env_path=$HOME/.poetry/env
if [[ -e $poetry_env_path ]]
then
    source $poetry_env_path
    debug_out "Initialized poetry"
fi

debug_out "Adding ssh keys to agent"
dusktreader_ed25519_key="dusktreader.ed25519.secret"
dusktreader_ed25519_path="$HOME/.ssh/$dusktreader_ed25519_key"
if [[ -e $dusktreader_ed25519_path ]]
then
    if [[ -z "$(ssh-add -l | grep $dusktreader_ed25519_key)" ]]
    then
        debug_out "$dusktreader_ed25519_key key not found in active ssh identities not found.  Setting it up:"
        ssh-add $dusktreader_ed25519_path
    else
        debug_out "$dusktreader_ed25519_key already added. Skipping..."
    fi
else
    debug_out "Didn't find any ssh key to add"
fi

nuke () {
    branch_name=$1
    local_name=$(echo $1 | sed s#origin/##)
    remote_name=origin/$local_name
    echo "Nuking $1 locally and on origin"
    echo "Latest commits:"
    echo "==============="
    echo "local"
    echo "-----"
    git --no-pager log -n 1 --pretty=format:"%h - %an (%ar): %s" $local_name
    echo
    echo "remote"
    echo "-----"
    git --no-pager log -n 1 --pretty=format:"%h - %an (%ar): %s" $remote_name
    echo
    echo "....."
    read -p "Press ENTER to continue"
    git branch -D $1
    git push origin --delete $1
}

ematch () {
    pattern=$1
    path=$2
    command vim $(ack -l $pattern $path)
}

pyclean () {
    find . -type f -name "*.py[co]" -delete
    find . -type d -name "__pycache__" -delete
}

install_dot() {
    rm -rf .wheels/dot*
    python -m pip install wheel
    python -m pip wheel -w .wheels .
    python -m pip install -U .wheels/dot*
}

pip_install_save() {
    package_name=$1
    requirements_file=$2
    if [[ -z $requirements_file ]]
    then
        requirements_file='./etc/setuptools/requirements.txt'
    fi
    pip install $package_name && pip freeze | grep -i "^$package_name==" >> $requirements_file
}

envo() {
    env_file=$1
    verbose=$2
    if [[ -z $env_file ]]
    then
        echo "You must supply an environment file as the first arg"
        return 1
    fi
    if [[ ! -e $env_file ]]
    then
        echo "The supplied env file doesn't exist"
        return 1
    fi
    if [[ -n $verbose ]]
    then
        echo "Setting environment variables..."
    fi
    while IFS='' read -r LINE || [ -n "${LINE}" ]; do
        if [[ -n $verbose ]]
        then
            echo "${LINE}"
        fi
        export $LINE
    done < $1
    # export $(grep -v '^#' $env_file | xargs -0)
}

count_files_in_subdirs() {
    target_dir=$1
    if [[ -z $target_dir ]]
    then
        echo "Please supply a target directory" >&2
        return 1
    fi
    debug_out "Counting files in subdirectories of $(readlink -f $target_dir)"
    sort_arg=$2
    if [[ -z $sort_arg ]]
    then
        sort_arg="-k2rn"
    fi
    timestamp=$(date '+%Y%m%d_%H%M%S')
    filename="/tmp/$timestamp-counts.txt"
    rm -f $filename
    for subdir in $(find $target_dir -maxdepth 1 -type d ! -path . )
    do
        echo "$subdir: $(find $subdir -type f | wc -l)" >> $filename
    done
    cat $filename | sort $sort_arg
}

smart_ls() {
    target=$1
    simple_list=$(command ls -1 $target) || return
    count=$(echo $simple_list | wc -w)
    if (( $count == 0 ))
    then
        echo "Directory is empty"
    elif (( $count <= 10 ))
    then
        ls -l --color=tty $target
    elif (( $count <= 100 ))
    then
        ls --color=tty $target
    else
        echo "Directory contains $count files"
    fi
}

fancy_cd() {
    newdir=$1
    builtin cd $newdir || return
    smart_ls .
}

abs_path() {
    path=$1
    if [[ -z $path ]]
    then
        pwd
        return
    fi

    python -c "import os; print(os.path.realpath('$path'))"
}

debug_out "Overriding virtualenv PS1 settings"
export VIRTUAL_ENV_DISABLE_PROMPT=1

function venv_info {
    if [[ -n "$VIRTUAL_ENV" ]]
    then
        echo "/venv:${VIRTUAL_ENV##*/}/ "
    else
        echo ""
    fi
}
export VENV_INFO="\$(venv_info)"

# Load my oh-my-posh theme
eval "$(oh-my-posh init bash --config ~/.config/oh-my-posh/dusktreader.omp.yaml)"
